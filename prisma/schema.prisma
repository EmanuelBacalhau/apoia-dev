generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String    @unique
  emailVerified            DateTime?
  image                    String?
  username                 String?   @unique
  bio                      String?
  connectedStripeAccountId String?

  mainTopic      String?
  targetAudience String?
  contentStyle   String?
  interests      String?

  accounts Account[]
  sessions Session[]

  donations Donation[] @relation("UserDonations")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  trendInsights TrendInsight[]
}

model TrendInsight {
  id           String   @id @default(cuid())
  title        String
  searchGrowth String
  competition  String
  trendLabel   String
  platforms    String
  badgeColor   String
  borderColor  String
  createdAt    DateTime @default(now())

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Donation {
  id            String        @id @default(cuid())
  amountInCents Int
  donorName     String
  donorMessage  String
  status        PaymentStatus @default(PENDING)

  userId String
  user   User   @relation("UserDonations", fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
